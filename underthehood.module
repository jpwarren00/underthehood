<?php
//$Id$
/**
  * A simple module for common debugging tasks
  */

function underthehood_menu(){
  $items = array();

  $items['admin/settings/underthehood'] = array(
    'title' => t('Under the hood settings'),
    'description' => 'An admin thingy',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('underthehood_admin_form'),
    'access arguments' => array('administer underthehood'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/gotcha'] = array(
    'title' => t('Your form data'),
    'page callback' => 'show_me_the_form_post',
    'access arguments' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  //$items['admin/settings/underthehood/alternate_db_setup'] = array();
  return $items;
}

function underthehood_perm(){
  return array('administer underthehood');
}

function underthehood_admin_form(){
  $form = array();
  return system_settings_form($form);
}
  
//Some debugging css
function underthehood_init(){
    drupal_add_css( drupal_get_path( 'module', 'underthehood' ) . '/underthehood.css');
    drupal_add_js( drupal_get_path( 'module', 'underthehood' ) . '/underthehood.js');
}

//hook block
function underthehood_block($op = 'list', $delta = 0, $edit = array()) {
  switch( $op ) {
    case 'list':
      $blocks[0] = array(
        'info' => t('PHP Server Variables'),
        'weight' => -999,
        'cache'  => BLOCK_NO_CACHE,
      );
      $blocks[1] = array(
        'info' => t('Variable Editor'),
        'weight' => -998,
        'cache' => BLOCK_NO_CACHE,
      );
      $blocks[2] = array(
        'info' => t('PHP Session Variables'),
        'weight' => -997,
        'cache' => BLOCK_NO_CACHE,
      );
      $blocks[3] = array(
        'info' => t('Form POST Data Inspector'),
        'weight' => -996,
        'cache' => BLOCK_NO_CACHE,
      );
      return $blocks;
    case 'view':
      switch( $delta ) {
        case '0':
          $block = array(
            'subject' => t('PHP SERVER VARIABLES'),
            'content' => grab_php_server_variables(),
          );
          return $block;
        case '1':
          $block = array(
            'subject' => t('Drupal Variables'),
            'content' => drupal_get_form('variable_editor_form'),
          );
          return $block;
        case '2':
          $block = array(
            'subject' => t('PHP Session Data'),
            'content' => formatted_session_data(),
          );
          return $block;
        case '3':
          $block = array(  
            'subject' => t('Hijack form POST data'),
            'content' => '<button id="gotcha-button" class="debugging button">GOTCHA</button>',
          );
          return $block;
      }
  }
}

/**
 * This function returns the current POST data, it's meant to be used in
 * conjuction with the "Hijack form POST data" block and javascript so you can
 * inspect what forms are sending.  Hopefully this will make migrating legacy
 * forms over to Drupal forms API forms easier for you.
 */ 
function show_me_the_form_post(){
  (!empty($_POST)) ? $output = prettify_array($_POST) : $output = '<div class="debugging">So sorry, no POST data today.</div>';
  return $output;
}

//The PHP session data nicely formatted for easy reading
function formatted_session_data(){
  (!empty($_SESSION)) ? $output = prettify_array($_SESSION): $output = '<div class="debugging">So sorry, no POST data today.</div>';
  return $output;
}
//PHP server variables
function grab_php_server_variables(){
  $output = prettify_array($_SERVER);
  return $output;
}

//Prettify's the array
function prettify_array($array = array()){
  $output = '<div class="debugging">';
  foreach($array as $key => $value){
    if(is_array($value)){
      foreach($value as $sub_key => $sub_value){
        if(is_array($sub_value)){
          foreach($sub_value as $sub_sub_key => $sub_sub_value){
            if(is_array($sub_sub_value)){
              $output .= serialize($sub_sub_value);
            } else {
              $output .= '<div class="debugging-key">[' . $key . '][' . $sub_key . '][' . $sub_sub_key . ']</div> => ' . $sub_sub_value . '<br>';
            }
          }
        } else {
          $output .= '<div class="debugging-key">[' . $key . '][' . $sub_key . ']</div> => ' . $sub_value . '<br>';
        }
      }
    } else {
      $output .= '<div class="debugging-key">[' . $key . ']</div> => ' . $value . '<br>';
    }
  }
  $output .= '</div>';
  return $output;
}

//A simple form generator that turns the entire variables table into a form
function variable_editor_form(){
  //The query
  $sql = "SELECT name,value FROM {variable}";
  $query = db_query($sql);
  while($data = db_fetch_array($query)){
    $variables[] = $data;
  }
  $form = array();
  //The generation loop
  foreach($variables as $variable){
    $form[$variable['name']] = array(
      '#type' => 'textarea',
      '#title' => t('Variable Name: "') . $variable['name'] . '"',
      '#default_value' => $variable['value'],
      '#rows' => 1
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save New Variables'),
    '#weight' => 999,
  );
  return $form;
}
function variable_editor_form_validate($form, &$form_state){}
function variable_editor_form_submit($form, &$form_state){
//Loop through the form values and save the variables
  foreach($form_state['values'] as $key => $value){
    variable_set($key, unserialize($value)); //Need to make sure the values are unserialized before variable_set serializes them
  }
}

//Just to keep your mood up.
function random_error_message($op){
  
  switch($op){
    case 'empty':
      $dice_roll = rand(0,2);
      $empty_messages = array(
        '<div class="debugging">So sorry, no POST data today.</div>',
        '<div class="debugging">I thought it was around here somewhere...</div>',
        '<div class="debugging">No luck for you.</div>',
      );
      return($empty_messages[$dice_roll]);
  }
}

/**
 * Content diff
 * What a great idea...
 * @todo
 *  everything
 */

function drupal_node_diff($node_original, $node_target){
  $serialized_original = serialize($node_original);
  $original_hash = md5($serialized_original);
  $serialized_target = serialize($node_target);
  $target_hash = md5($serialized_target);
  if( strcmp( $serialized_original, $serialized_target ) != 0 ){
    return FALSE;
  } else {
    return TRUE;
  }
}