<?php
//$Id$
/**
  * A simple module for common debugging tasks
  */

function underthehood_menu(){
  $items = array();

  $items['admin/settings/underthehood'] = array(
    'title' => t('Under the hood settings'),
    'description' => 'An admin thingy',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('underthehood_admin_form'),
    'access arguments' => array('administer underthehood'),
    'type' => MENU_NORMAL_ITEM,
  );
  $items['admin/gotcha'] = array(
    'title' => t('Your form data'),
    'page callback' => 'show_me_the_form_post',
    'access arguments' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );
  //$items['admin/settings/underthehood/alternate_db_setup'] = array();
  return $items;
}

function underthehood_perm(){
  return array('administer underthehood');
}

function underthehood_admin_form(){
  $form = array();
  return system_settings_form($form);
}
  
//Some debugging css
function underthehood_init(){
    drupal_add_css( drupal_get_path( 'module', 'underthehood' ) . '/underthehood.css');
    drupal_add_js( drupal_get_path( 'module', 'underthehood' ) . '/underthehood.js');
}

//hook block
function underthehood_block($op = 'list', $delta = 0, $edit = array()) {
  switch( $op ) {
    case 'list':
      $blocks[0] = array(
        'info' => t('PHP Server Variables'),
        'weight' => -999,
        'cache'  => BLOCK_NO_CACHE,
      );
      $blocks[1] = array(
        'info' => t('Variable Editor'),
        'weight' => -998,
        'cache' => BLOCK_NO_CACHE,
      );
      $blocks[2] = array(
        'info' => t('PHP Session Variables'),
        'weight' => -997,
        'cache' => BLOCK_NO_CACHE,
      );
      $blocks[3] = array(
        'info' => t('Form POST Data Inspector'),
        'weight' => -996,
        'cache' => BLOCK_NO_CACHE,
      );
      return $blocks;
    case 'view':
      switch( $delta ) {
        case '0':
          $block = array(
            'subject' => t('PHP SERVER VARIABLES'),
            'content' => grab_php_server_variables(),
          );
          return $block;
        case '1':
          $block = array(
            'subject' => t('Drupal Variables'),
            'content' => drupal_get_form('variable_editor_form'),
          );
          return $block;
        case '2':
          $block = array(
            'subject' => t('PHP Session Data'),
            'content' => formatted_session_data(),
          );
          return $block;
        case '3':
          $block = array(
            'subject' => t('Hijack form POST data'),
            'content' => '<button id="gotcha-button" class="debugging button">GOTCHA</button>',
          );
          return $block;
      }
  }
}

// This function displays the current POST data
function show_me_the_form_post($ops = array()){
  (!empty($_POST)) ? $output = prettify_array($_POST) : $output = '<div class="debugging">So sorry, no POST data today.</div>';
  return $output;
}

//The PHP session data nicely formatted for easy reading
function formatted_session_data(){
  $output = prettify_array($_SESSION);
  return $output;
}

//Prettify's the array
function prettify_array($array = array()){
  $output = '<div id="debugging-block" class="debugging">';
  foreach($array as $key => $value){
    if(is_array($value)){
      foreach($value as $sub_key => $sub_value){
        if(is_array($sub_value)){
          foreach($sub_value as $sub_sub_key => $sub_sub_value){
            if(is_array($sub_sub_value)){
              $output .= serialize($sub_sub_value);
            } else {
              $output .= '[' . $key . '][' . $sub_key . '][' . $sub_sub_key . '] => ' . $sub_sub_value . '<br>';
            }
          }
        } else {
          $output .= '[' . $key . '][' . $sub_key . '] => ' . $sub_value . '<br>';
        }
      }
    } else {
      $output .= '[' . $key . '] => ' . $value . '<br>';
    }
  }
  $output .= '</div>';
  return $output;
}

//A simple form generator that turns the entire variables table into a form
function variable_editor_form(){
  //The query
  $sql = "SELECT name,value FROM {variable}";
  $query = db_query($sql);
  while($data = db_fetch_array($query)){
    $variables[] = $data;
  }
  $form = array();
  //The generation loop
  foreach($variables as $variable){
    $form[$variable['name']] = array(
      '#type' => 'textarea',
      '#title' => t('Variable Name: "') . $variable['name'] . '"',
      '#default_value' => $variable['value'],
      '#rows' => 1
    );
  }
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save New Variables'),
    '#weight' => 999,
  );
  return $form;
}
function variable_editor_form_validate($form, &$form_state){}
function variable_editor_form_submit($form, &$form_state){
//Loop through the form values and save the variables
  foreach($form_state['values'] as $key => $value){
    variable_set($key, unserialize($value));
  }
}

function grab_php_server_variables(){
  $output = '';
  $output .='<div id="debugging-block" class="debugging">';
  $output .= '<div class="debugging-description">REDIRECT_STATUS</div>' . $_SERVER['REDIRECT_STATUS'] . '<br>';
  $output .= '<div class="debugging-description">HOST</div>' . $_SERVER['HTTP_HOST']. '<br>';
  $output .= '<div class="debugging-description">USER AGENT</div>' . $_SERVER['HTTP_USER_AGENT']. '<br>';
  $output .= '<div class="debugging-description">ACCEPT</div>' . $_SERVER['HTTP_ACCEPT']. '<br>';
  $output .= '<div class="debugging-description">LANGUAGE</div>' . $_SERVER['HTTP_ACCEPT_LANGUAGE']. '<br>';
  $output .= '<div class="debugging-description">ENCODING</div>' . $_SERVER['HTTP_ACCEPT_ENCODING']. '<br>';
  $output .= '<div class="debugging-description">CHARSET</div>' . $_SERVER['HTTP_ACCEPT_CHARSET']. '<br>';
  $output .= '<div class="debugging-description">KEEP ALIVE</div>' . $_SERVER['HTTP_KEEP_ALIVE']. '<br>';
  $output .= '<div class="debugging-description">CONNECTION</div>' . $_SERVER['HTTP_CONNECTION']. '<br>';
  $output .= '<div class="debugging-description">REFERER</div>' . $_SERVER['HTTP_REFERER']. '<br>';
  $output .= '<div class="debugging-description">COOKIE</div>' . $_SERVER['HTTP_COOKIE']. '<br>';
  $output .= '<div class="debugging-description">PATH</div>' . $_SERVER['PATH']. '<br>';
  $output .= '<div class="debugging-description">SIGNATURE</div>' . $_SERVER['SERVER_SIGNATURE']. '<br>';
  $output .= '<div class="debugging-description">SERVER SOFTWARE</div>' . $_SERVER['SERVER_SOFTWARE']. '<br>';
  $output .= '<div class="debugging-description">SERVER NAME</div>' . $_SERVER['SERVER_NAME']. '<br>';
  $output .= '<div class="debugging-description">SERVER ADDRESS</div>' . $_SERVER['SERVER_ADDR']. '<br>';
  $output .= '<div class="debugging-description">SERVER PORT</div>' . $_SERVER['SERVER_PORT']. '<br>';
  $output .= '<div class="debugging-description">REMOTE ADDRESS</div>' . $_SERVER['REMOTE_ADDR']. '<br>';
  $output .= '<div class="debugging-description">DOCUMENT ROOT</div>' . $_SERVER['DOCUMENT_ROOT']. '<br>';
  $output .= '<div class="debugging-description">SERVER ADMIN</div>' . $_SERVER['SERVER_ADMIN']. '<br>';
  $output .= '<div class="debugging-description">SCRIPT FILENAME</div>' . $_SERVER['SCRIPT_FILENAME']. '<br>';
  $output .= '<div class="debugging-description">REMOTE PORT</div>' . $_SERVER['REMOTE_PORT']. '<br>';
  $output .= '<div class="debugging-description">REDIRECT QUERY</div>' . $_SERVER['REDIRECT_QUERY_STRING']. '<br>';
  $output .= '<div class="debugging-description">REDIRECT URL</div>' . $_SERVER['REDIRECT_URL']. '<br>';
  $output .= '<div class="debugging-description">GATEWAY INTERFACE</div>' . $_SERVER['GATEWAY_INTERFACE']. '<br>';
  $output .= '<div class="debugging-description">SERVER PROTOCOL</div>' . $_SERVER['SERVER_PROTOCOL']. '<br>';
  $output .= '<div class="debugging-description">REQUEST METHOD</div>' . $_SERVER['REQUEST_METHOD']. '<br>';
  $output .= '<div class="debugging-description">QUERY STRING</div>' . $_SERVER['QUERY_STRING']. '<br>';
  $output .= '<div class="debugging-description">REQUEST URI</div>' . $_SERVER['REQUEST_URI']. '<br>';
  $output .= '<div class="debugging-description">SCRIPT NAME</div>' . $_SERVER['SCRIPT_NAME']. '<br>';
  $output .= '<div class="debugging-description">PHP SELF</div>' . $_SERVER['PHP_SELF']. '<br>';
  $output .= '<div class="debugging-description">REQUEST TIME</div>' . $_SERVER['REQUEST_TIME']. '<br>';
  $output .= '<div class="debugging-description">ARGV</div>' . serialize($_SERVER['argv']). '<br>';
  $output .= '<div class="debugging-description">ARGC</div>' . $_SERVER['argc']. '<br>';
  return $output;
}

//Content diff
function drupal_node_diff($node_original, $node_target){
  $serialized_original = serialize($node_original);
  $original_hash = md5($serialized_original);
  $serialized_target = serialize($node_target);
  $target_hash = md5($serialized_target);
  if( strcmp( $serialized_original, $serialized_target ) != 0 ){
    return FALSE;
  } else {
    return TRUE;
  }
}